<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE header PUBLIC "-//Apple Computer//DTD HEADERDOC 1.6//EN" "/System/Library/DTDs/HeaderDoc-1.6.dtd">
<header id="//xsdoc_ref/doc/header/unistd.h" lang="c" filename="unistd.h" headerpath="/Users/macmade/Documents/Macmade/Development/GitHub/XEOS/source/lib/posix/include/posix/unistd.h"><name>unistd.h</name>
<includes>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/null.h">&lt;system/types/null.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/size_t.h">&lt;system/types/size_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/ssize_t.h">&lt;system/types/ssize_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/uid_t.h">&lt;system/types/uid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/off_t.h">&lt;system/types/off_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/pid_t.h">&lt;system/types/pid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/gid_t.h">&lt;system/types/gid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/useconds_t.h">&lt;system/types/useconds_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/intptr_t.h">&lt;system/types/intptr_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/seek_set.h">&lt;system/types/seek_set.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/seek_cur.h">&lt;system/types/seek_cur.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/seek_end.h">&lt;system/types/seek_end.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/size_t.h">&lt;system/types/size_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/ssize_t.h">&lt;system/types/ssize_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/uid_t.h">&lt;system/types/uid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/gid_t.h">&lt;system/types/gid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/off_t.h">&lt;system/types/off_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/pid_t.h">&lt;system/types/pid_t.h&gt;</hd_link></include>
<include><hd_link logicalPath="//xsdoc_ref/doc/header/intptr_t.h">&lt;system/types/intptr_t.h&gt;</hd_link></include>
</includes>
<desc><p/></desc>
<functions><function id="//xsdoc_ref/c/func/_exit" lang="c"><name>_exit</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>status</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>_exit</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>status</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/access" lang="c"><name>access</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>name</name></parsedparameter>
<parsedparameter><type>int</type><name>type</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>access</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>type</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/alarm" lang="c"><name>alarm</name>
<parsedparameterlist>
<parsedparameter><type>unsigned int</type><name>seconds</name></parsedparameter>
</parsedparameterlist>
<returntype> unsigned int</returntype>
<declaration><declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_function>alarm</declaration_function>(
    <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_param>seconds</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/chdir" lang="c"><name>chdir</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>chdir</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/chown" lang="c"><name>chown</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>uid_t</type><name>owner</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>group</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>chown</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>uid_t</declaration_type> <declaration_param>owner</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_param>group</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/close" lang="c"><name>close</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>close</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/confstr" lang="c"><name>confstr</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>name</name></parsedparameter>
<parsedparameter><type>char *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> size_t</returntype>
<declaration><declaration_type>size_t</declaration_type> <declaration_function>confstr</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>name</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/crypt" lang="c"><name>crypt</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>key</name></parsedparameter>
<parsedparameter><type>const char *</type><name>salt</name></parsedparameter>
</parsedparameterlist>
<returntype> char *</returntype>
<declaration><declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>crypt</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>key</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>salt</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/ctermid" lang="c"><name>ctermid</name>
<parsedparameterlist>
<parsedparameter><type>char *</type><name>s</name></parsedparameter>
</parsedparameterlist>
<returntype> char *</returntype>
<declaration><declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>ctermid</declaration_function>(
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>s</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/dup" lang="c"><name>dup</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>dup</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/dup2" lang="c"><name>dup2</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd1</name></parsedparameter>
<parsedparameter><type>int</type><name>fd2</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>dup2</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd1</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>fd2</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/encrypt" lang="c"><name>encrypt</name>
<parsedparameterlist>
<parsedparameter><type>char</type><name>block</name></parsedparameter>
<parsedparameter><type>int</type><name>edflag</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>encrypt</declaration_function>(
    <declaration_type>char</declaration_type> <declaration_type>block</declaration_type>[ <declaration_number>64</declaration_number> ],
    <declaration_type>int</declaration_type> <declaration_param>edflag</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execl" lang="c"><name>execl</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>const char *</type><name>arg</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execl</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execle" lang="c"><name>execle</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>const char *</type><name>arg</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execle</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execlp" lang="c"><name>execlp</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>const char *</type><name>arg</name></parsedparameter>
<parsedparameter><type> ...</type><name>...</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execlp</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>arg</declaration_param>,
    ... );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execv" lang="c"><name>execv</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>char * const</type><name>argv</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execv</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>argv</declaration_type>[] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execve" lang="c"><name>execve</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>char * const</type><name>argv</name></parsedparameter>
<parsedparameter><type>char * const</type><name>envp</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execve</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>argv</declaration_type>[],
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>envp</declaration_type>[] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/execvp" lang="c"><name>execvp</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>char * const</type><name>argv</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>execvp</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>argv</declaration_type>[] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/faccessat" lang="c"><name>faccessat</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>int</type><name>amode</name></parsedparameter>
<parsedparameter><type>int</type><name>flag</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>faccessat</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>amode</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>flag</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fchdir" lang="c"><name>fchdir</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fchdir</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fchown" lang="c"><name>fchown</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>uid_t</type><name>owner</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>group</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fchown</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>uid_t</declaration_type> <declaration_param>owner</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_param>group</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fchownat" lang="c"><name>fchownat</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>uid_t</type><name>owner</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>group</name></parsedparameter>
<parsedparameter><type>int</type><name>flag</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fchownat</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>uid_t</declaration_type> <declaration_param>owner</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_param>group</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>flag</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fdatasync" lang="c"><name>fdatasync</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fdatasync</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fexecve" lang="c"><name>fexecve</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>char * const</type><name>argv</name></parsedparameter>
<parsedparameter><type>char * const</type><name>envp</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fexecve</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>argv</declaration_type>[],
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>envp</declaration_type>[] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fork" lang="c"><name>fork</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>fork</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fpathconf" lang="c"><name>fpathconf</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>int</type><name>name</name></parsedparameter>
</parsedparameterlist>
<returntype> long int</returntype>
<declaration><declaration_type>long</declaration_type> <declaration_type>int</declaration_type> <declaration_function>fpathconf</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>name</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/fsync" lang="c"><name>fsync</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>fsync</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/ftruncate" lang="c"><name>ftruncate</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>off_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>ftruncate</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getcwd" lang="c"><name>getcwd</name>
<parsedparameterlist>
<parsedparameter><type>char *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>size</name></parsedparameter>
</parsedparameterlist>
<returntype> char *</returntype>
<declaration><declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>getcwd</declaration_function>(
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>size</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getegid" lang="c"><name>getegid</name>
<returntype> gid_t</returntype>
<declaration><declaration_type>gid_t</declaration_type> <declaration_function>getegid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/geteuid" lang="c"><name>geteuid</name>
<returntype> uid_t</returntype>
<declaration><declaration_type>uid_t</declaration_type> <declaration_function>geteuid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getgid" lang="c"><name>getgid</name>
<returntype> gid_t</returntype>
<declaration><declaration_type>gid_t</declaration_type> <declaration_function>getgid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getgroups" lang="c"><name>getgroups</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>size</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>list</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>getgroups</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>size</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_type>list</declaration_type>[] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/gethostid" lang="c"><name>gethostid</name>
<returntype> long</returntype>
<declaration><declaration_type>long</declaration_type> <declaration_function>gethostid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getlogin" lang="c"><name>getlogin</name>
<returntype> char *</returntype>
<declaration><declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>getlogin</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getlogin_r" lang="c"><name>getlogin_r</name>
<parsedparameterlist>
<parsedparameter><type>char *</type><name>name</name></parsedparameter>
<parsedparameter><type>size_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>getlogin_r</declaration_function>(
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getopt" lang="c"><name>getopt</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>argc</name></parsedparameter>
<parsedparameter><type>char * const</type><name>argv</name></parsedparameter>
<parsedparameter><type>const char *</type><name>options</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>getopt</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>argc</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_keyword>const</declaration_keyword> <declaration_type>argv</declaration_type>[],
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>options</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getpgid" lang="c"><name>getpgid</name>
<parsedparameterlist>
<parsedparameter><type>pid_t</type><name>pid</name></parsedparameter>
</parsedparameterlist>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>getpgid</declaration_function>(
    <declaration_type>pid_t</declaration_type> <declaration_param>pid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getpgrp" lang="c"><name>getpgrp</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>getpgrp</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getpid" lang="c"><name>getpid</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>getpid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getppid" lang="c"><name>getppid</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>getppid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getsid" lang="c"><name>getsid</name>
<parsedparameterlist>
<parsedparameter><type>pid_t</type><name>pid</name></parsedparameter>
</parsedparameterlist>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>getsid</declaration_function>(
    <declaration_type>pid_t</declaration_type> <declaration_param>pid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/getuid" lang="c"><name>getuid</name>
<returntype> uid_t</returntype>
<declaration><declaration_type>uid_t</declaration_type> <declaration_function>getuid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/isatty" lang="c"><name>isatty</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>isatty</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/lchown" lang="c"><name>lchown</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>uid_t</type><name>owner</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>group</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>lchown</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>uid_t</declaration_type> <declaration_param>owner</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_param>group</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/link" lang="c"><name>link</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>from</name></parsedparameter>
<parsedparameter><type>const char *</type><name>to</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>link</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>from</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>to</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/linkat" lang="c"><name>linkat</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd1</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path1</name></parsedparameter>
<parsedparameter><type>int</type><name>fd2</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path2</name></parsedparameter>
<parsedparameter><type>int</type><name>flag</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>linkat</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd1</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path1</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>fd2</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path2</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>flag</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/lockf" lang="c"><name>lockf</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>int</type><name>cmd</name></parsedparameter>
<parsedparameter><type>off_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>lockf</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>cmd</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/lseek" lang="c"><name>lseek</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>off_t</type><name>offset</name></parsedparameter>
<parsedparameter><type>int</type><name>whence</name></parsedparameter>
</parsedparameterlist>
<returntype> off_t</returntype>
<declaration><declaration_type>off_t</declaration_type> <declaration_function>lseek</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>offset</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>whence</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/nice" lang="c"><name>nice</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>inc</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>nice</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>inc</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/pathconf" lang="c"><name>pathconf</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>int</type><name>name</name></parsedparameter>
</parsedparameterlist>
<returntype> long int</returntype>
<declaration><declaration_type>long</declaration_type> <declaration_type>int</declaration_type> <declaration_function>pathconf</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>name</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/pause" lang="c"><name>pause</name>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>pause</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/pipe" lang="c"><name>pipe</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>desc</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>pipe</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_type>desc</declaration_type>[ <declaration_number>2</declaration_number> ] );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/pread" lang="c"><name>pread</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>void *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>nbytes</name></parsedparameter>
<parsedparameter><type>off_t</type><name>offset</name></parsedparameter>
</parsedparameterlist>
<returntype> ssize_t</returntype>
<declaration><declaration_type>ssize_t</declaration_type> <declaration_function>pread</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>nbytes</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>offset</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/pwrite" lang="c"><name>pwrite</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const void *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>nbytes</name></parsedparameter>
<parsedparameter><type>off_t</type><name>offset</name></parsedparameter>
</parsedparameterlist>
<returntype> ssize_t</returntype>
<declaration><declaration_type>ssize_t</declaration_type> <declaration_function>pwrite</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>nbytes</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>offset</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/read" lang="c"><name>read</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>void *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>nbytes</name></parsedparameter>
</parsedparameterlist>
<returntype> ssize_t</returntype>
<declaration><declaration_type>ssize_t</declaration_type> <declaration_function>read</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>nbytes</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/readlink" lang="c"><name>readlink</name>
<parsedparameterlist>
<parsedparameter><type>const char * restrict</type><name>path</name></parsedparameter>
<parsedparameter><type>char * restrict</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>readlink</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>path</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/readlinkat" lang="c"><name>readlinkat</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const char * restrict</type><name>path</name></parsedparameter>
<parsedparameter><type>char * restrict</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>bufsize</name></parsedparameter>
</parsedparameterlist>
<returntype> ssize_t</returntype>
<declaration><declaration_type>ssize_t</declaration_type> <declaration_function>readlinkat</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>path</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>bufsize</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/rmdir" lang="c"><name>rmdir</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>rmdir</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setegid" lang="c"><name>setegid</name>
<parsedparameterlist>
<parsedparameter><type>gid_t</type><name>gid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setegid</declaration_function>(
    <declaration_type>gid_t</declaration_type> <declaration_param>gid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/seteuid" lang="c"><name>seteuid</name>
<parsedparameterlist>
<parsedparameter><type>uid_t</type><name>uid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>seteuid</declaration_function>(
    <declaration_type>uid_t</declaration_type> <declaration_param>uid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setgid" lang="c"><name>setgid</name>
<parsedparameterlist>
<parsedparameter><type>gid_t</type><name>gid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setgid</declaration_function>(
    <declaration_type>gid_t</declaration_type> <declaration_param>gid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setpgid" lang="c"><name>setpgid</name>
<parsedparameterlist>
<parsedparameter><type>pid_t</type><name>pid</name></parsedparameter>
<parsedparameter><type>pid_t</type><name>pgid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setpgid</declaration_function>(
    <declaration_type>pid_t</declaration_type> <declaration_param>pid</declaration_param>,
    <declaration_type>pid_t</declaration_type> <declaration_param>pgid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setpgrp" lang="c"><name>setpgrp</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>setpgrp</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setregid" lang="c"><name>setregid</name>
<parsedparameterlist>
<parsedparameter><type>gid_t</type><name>rgid</name></parsedparameter>
<parsedparameter><type>gid_t</type><name>egid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setregid</declaration_function>(
    <declaration_type>gid_t</declaration_type> <declaration_param>rgid</declaration_param>,
    <declaration_type>gid_t</declaration_type> <declaration_param>egid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setreuid" lang="c"><name>setreuid</name>
<parsedparameterlist>
<parsedparameter><type>uid_t</type><name>ruid</name></parsedparameter>
<parsedparameter><type>uid_t</type><name>euid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setreuid</declaration_function>(
    <declaration_type>uid_t</declaration_type> <declaration_param>ruid</declaration_param>,
    <declaration_type>uid_t</declaration_type> <declaration_param>euid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setsid" lang="c"><name>setsid</name>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>setsid</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/setuid" lang="c"><name>setuid</name>
<parsedparameterlist>
<parsedparameter><type>uid_t</type><name>uid</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>setuid</declaration_function>(
    <declaration_type>uid_t</declaration_type> <declaration_param>uid</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/sleep" lang="c"><name>sleep</name>
<parsedparameterlist>
<parsedparameter><type>unsigned int</type><name>seconds</name></parsedparameter>
</parsedparameterlist>
<returntype> unsigned int</returntype>
<declaration><declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_function>sleep</declaration_function>(
    <declaration_keyword>unsigned</declaration_keyword> <declaration_type>int</declaration_type> <declaration_param>seconds</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/swab" lang="c"><name>swab</name>
<parsedparameterlist>
<parsedparameter><type>const void * restrict</type><name>from</name></parsedparameter>
<parsedparameter><type>void * restrict</type><name>to</name></parsedparameter>
<parsedparameter><type>ssize_t</type><name>n</name></parsedparameter>
</parsedparameterlist>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>swab</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>from</declaration_param>,
    <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_type>restrict</declaration_type> <declaration_param>to</declaration_param>,
    <declaration_type>ssize_t</declaration_type> <declaration_param>n</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/symlink" lang="c"><name>symlink</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>from</name></parsedparameter>
<parsedparameter><type>const char *</type><name>to</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>symlink</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>from</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>to</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/symlinkat" lang="c"><name>symlinkat</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>path1</name></parsedparameter>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path2</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>symlinkat</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path1</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path2</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/sync" lang="c"><name>sync</name>
<returntype> void</returntype>
<declaration><declaration_type>void</declaration_type> <declaration_function>sync</declaration_function>(
    <declaration_param>void</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/sysconf" lang="c"><name>sysconf</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>name</name></parsedparameter>
</parsedparameterlist>
<returntype> long int</returntype>
<declaration><declaration_type>long</declaration_type> <declaration_type>int</declaration_type> <declaration_function>sysconf</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>name</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/tcgetpgrp" lang="c"><name>tcgetpgrp</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> pid_t</returntype>
<declaration><declaration_type>pid_t</declaration_type> <declaration_function>tcgetpgrp</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/tcsetpgrp" lang="c"><name>tcsetpgrp</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>pid_t</type><name>pgrp_id</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>tcsetpgrp</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>pid_t</declaration_type> <declaration_param>pgrp_id</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/truncate" lang="c"><name>truncate</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>file</name></parsedparameter>
<parsedparameter><type>off_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>truncate</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>file</declaration_param>,
    <declaration_type>off_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/ttyname" lang="c"><name>ttyname</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
</parsedparameterlist>
<returntype> char *</returntype>
<declaration><declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_function>ttyname</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/ttyname_r" lang="c"><name>ttyname_r</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>char *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>ttyname_r</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/unlink" lang="c"><name>unlink</name>
<parsedparameterlist>
<parsedparameter><type>const char *</type><name>name</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>unlink</declaration_function>(
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>name</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/unlinkat" lang="c"><name>unlinkat</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const char *</type><name>path</name></parsedparameter>
<parsedparameter><type>int</type><name>flag</name></parsedparameter>
</parsedparameterlist>
<returntype> int</returntype>
<declaration><declaration_type>int</declaration_type> <declaration_function>unlinkat</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type><declaration_param>path</declaration_param>,
    <declaration_type>int</declaration_type> <declaration_param>flag</declaration_param> );  </declaration>
<desc><p/></desc>
</function><function id="//xsdoc_ref/c/func/write" lang="c"><name>write</name>
<parsedparameterlist>
<parsedparameter><type>int</type><name>fd</name></parsedparameter>
<parsedparameter><type>const void *</type><name>buf</name></parsedparameter>
<parsedparameter><type>size_t</type><name>len</name></parsedparameter>
</parsedparameterlist>
<returntype> ssize_t</returntype>
<declaration><declaration_type>ssize_t</declaration_type> <declaration_function>write</declaration_function>(
    <declaration_type>int</declaration_type> <declaration_param>fd</declaration_param>,
    <declaration_keyword>const</declaration_keyword> <declaration_type>void</declaration_type> <declaration_type>*</declaration_type><declaration_param>buf</declaration_param>,
    <declaration_type>size_t</declaration_type> <declaration_param>len</declaration_param> );  </declaration>
<desc><p/></desc>
</function></functions>
<globals><variable id="//xsdoc_ref/c/data/optarg" lang="c"><name>optarg</name>
<returntype>extern char *</returntype>
<declaration> <declaration_keyword>extern</declaration_keyword> <declaration_type>char</declaration_type> <declaration_type>*</declaration_type> <declaration_var>optarg</declaration_var>;  </declaration>
<desc><p/></desc>
</variable><variable id="//xsdoc_ref/c/data/opterr" lang="c"><name>opterr</name>
<returntype>extern int</returntype>
<declaration><declaration_keyword>extern</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>opterr</declaration_var>;  </declaration>
<desc><p/></desc>
</variable><variable id="//xsdoc_ref/c/data/optind" lang="c"><name>optind</name>
<returntype>extern int</returntype>
<declaration><declaration_keyword>extern</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>optind</declaration_var>;  </declaration>
<desc><p/></desc>
</variable><variable id="//xsdoc_ref/c/data/optopt" lang="c"><name>optopt</name>
<returntype>extern int</returntype>
<declaration><declaration_keyword>extern</declaration_keyword> <declaration_type>int</declaration_type> <declaration_var>optopt</declaration_var>;  </declaration>
<desc><p/></desc>
</variable></globals>
<defines><pdefine id="//xsdoc_ref/c/macro/__XEOS_LIB_POSIX_UNISTD_H__" definetype="value" lang="c"><name>__XEOS_LIB_POSIX_UNISTD_H__</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>__XEOS_LIB_POSIX_UNISTD_H__</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_PATH" definetype="value" lang="c"><name>_CS_PATH</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_PATH</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_ILP32_OFFBIG_LIBS" definetype="value" lang="c"><name>_CS_POSIX_V6_ILP32_OFFBIG_LIBS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_ILP32_OFFBIG_LIBS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_LP64_OFF64_CFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V6_LP64_OFF64_CFLAGS</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_LP64_OFF64_CFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_LP64_OFF64_LDFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V6_LP64_OFF64_LDFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_LP64_OFF64_LDFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_LP64_OFF64_LIBS" definetype="value" lang="c"><name>_CS_POSIX_V6_LP64_OFF64_LIBS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_LP64_OFF64_LIBS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS" definetype="value" lang="c"><name>_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_ILP32_OFFBIG_LIBS" definetype="value" lang="c"><name>_CS_POSIX_V7_ILP32_OFFBIG_LIBS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_ILP32_OFFBIG_LIBS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_LP64_OFF64_CFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_LP64_OFF64_CFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_LP64_OFF64_CFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_LP64_OFF64_LDFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_LP64_OFF64_LDFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_LP64_OFF64_LDFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_LP64_OFF64_LIBS" definetype="value" lang="c"><name>_CS_POSIX_V7_LP64_OFF64_LIBS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_LP64_OFF64_LIBS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_THREADS_CFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_THREADS_CFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_THREADS_CFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_THREADS_LDFLAGS" definetype="value" lang="c"><name>_CS_POSIX_V7_THREADS_LDFLAGS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_THREADS_LDFLAGS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS" definetype="value" lang="c"><name>_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_V6_ENV" definetype="value" lang="c"><name>_CS_V6_ENV</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_V6_ENV</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_CS_V7_ENV" definetype="value" lang="c"><name>_CS_V7_ENV</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_CS_V7_ENV</declaration_preprocessor> <declaration_preprocessor>"</declaration_preprocessor><declaration_preprocessor>"</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_2_SYMLINKS" definetype="value" lang="c"><name>_PC_2_SYMLINKS</name>
<declaration><declaration_comment>/*
#define _CS_POSIX_V7_ILP32_OFF32_CFLAGS         ""
#define _CS_POSIX_V7_ILP32_OFF32_LDFLAGS        ""
#define _CS_POSIX_V7_ILP32_OFF32_LIBS           ""
#define _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS        ""
#define _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS       ""
#define _CS_POSIX_V7_LPBIG_OFFBIG_LIBS          ""
#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS         ""
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS        ""
#define _CS_POSIX_V6_ILP32_OFF32_LIBS           ""
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS        ""
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS       ""
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS          ""</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_2_SYMLINKS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_ALLOC_SIZE_MIN" definetype="value" lang="c"><name>_PC_ALLOC_SIZE_MIN</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_ALLOC_SIZE_MIN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_ASYNC_IO" definetype="value" lang="c"><name>_PC_ASYNC_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_ASYNC_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_CHOWN_RESTRICTED" definetype="value" lang="c"><name>_PC_CHOWN_RESTRICTED</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_CHOWN_RESTRICTED</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_FILESIZEBITS" definetype="value" lang="c"><name>_PC_FILESIZEBITS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_FILESIZEBITS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_LINK_MAX" definetype="value" lang="c"><name>_PC_LINK_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_LINK_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_MAX_CANON" definetype="value" lang="c"><name>_PC_MAX_CANON</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_MAX_CANON</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_MAX_INPUT" definetype="value" lang="c"><name>_PC_MAX_INPUT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_MAX_INPUT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_NAME_MAX" definetype="value" lang="c"><name>_PC_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_NO_TRUNC" definetype="value" lang="c"><name>_PC_NO_TRUNC</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_NO_TRUNC</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_PATH_MAX" definetype="value" lang="c"><name>_PC_PATH_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_PATH_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_PIPE_BUF" definetype="value" lang="c"><name>_PC_PIPE_BUF</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_PIPE_BUF</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_PRIO_IO" definetype="value" lang="c"><name>_PC_PRIO_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_PRIO_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_REC_INCR_XFER_SIZE" definetype="value" lang="c"><name>_PC_REC_INCR_XFER_SIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_REC_INCR_XFER_SIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_REC_MAX_XFER_SIZE" definetype="value" lang="c"><name>_PC_REC_MAX_XFER_SIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_REC_MAX_XFER_SIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_REC_MIN_XFER_SIZE" definetype="value" lang="c"><name>_PC_REC_MIN_XFER_SIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_REC_MIN_XFER_SIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_REC_XFER_ALIGN" definetype="value" lang="c"><name>_PC_REC_XFER_ALIGN</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_REC_XFER_ALIGN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_SYMLINK_MAX" definetype="value" lang="c"><name>_PC_SYMLINK_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_SYMLINK_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_SYNC_IO" definetype="value" lang="c"><name>_PC_SYNC_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_SYNC_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_TIMESTAMP_RESOLUTION" definetype="value" lang="c"><name>_PC_TIMESTAMP_RESOLUTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_TIMESTAMP_RESOLUTION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_PC_VDISABLE" definetype="value" lang="c"><name>_PC_VDISABLE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_PC_VDISABLE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX2_C_BIND" definetype="value" lang="c"><name>_POSIX2_C_BIND</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX2_C_BIND</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX2_CHAR_TERM" definetype="value" lang="c"><name>_POSIX2_CHAR_TERM</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX2_CHAR_TERM</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX2_SYMLINKS" definetype="value" lang="c"><name>_POSIX2_SYMLINKS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX2_SYMLINKS</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX2_VERSION" definetype="value" lang="c"><name>_POSIX2_VERSION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX2_VERSION</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_ASYNC_IO" definetype="value" lang="c"><name>_POSIX_ASYNC_IO</name>
<declaration> <declaration_comment>/*
#define        _POSIX_V6_ILP32_OFF32                   1
#define        _POSIX_V6_LPBIG_OFFBIG                  1
#define        _POSIX_V7_ILP32_OFF32                   1
#define        _POSIX_V7_LPBIG_OFFBIG                  1</declaration_comment>
    <declaration_comment>*/</declaration_comment>
<declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_ASYNC_IO</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_ASYNCHRONOUS_IO" definetype="value" lang="c"><name>_POSIX_ASYNCHRONOUS_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_ASYNCHRONOUS_IO</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_BARRIERS" definetype="value" lang="c"><name>_POSIX_BARRIERS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_BARRIERS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_CHOWN_RESTRICTED" definetype="value" lang="c"><name>_POSIX_CHOWN_RESTRICTED</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_CHOWN_RESTRICTED</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_CLOCK_SELECTION" definetype="value" lang="c"><name>_POSIX_CLOCK_SELECTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_CLOCK_SELECTION</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_JOB_CONTROL" definetype="value" lang="c"><name>_POSIX_JOB_CONTROL</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_JOB_CONTROL</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_MAPPED_FILES" definetype="value" lang="c"><name>_POSIX_MAPPED_FILES</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_MAPPED_FILES</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_MEMORY_PROTECTION" definetype="value" lang="c"><name>_POSIX_MEMORY_PROTECTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_MEMORY_PROTECTION</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_NO_TRUNC" definetype="value" lang="c"><name>_POSIX_NO_TRUNC</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_NO_TRUNC</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_PRIO_IO" definetype="value" lang="c"><name>_POSIX_PRIO_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_PRIO_IO</declaration_preprocessor> <declaration_preprocessor>2</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_READER_WRITER_LOCKS" definetype="value" lang="c"><name>_POSIX_READER_WRITER_LOCKS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_READER_WRITER_LOCKS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_REALTIME_SIGNALS" definetype="value" lang="c"><name>_POSIX_REALTIME_SIGNALS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_REALTIME_SIGNALS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_REGEXP" definetype="value" lang="c"><name>_POSIX_REGEXP</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_REGEXP</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_SAVED_IDS" definetype="value" lang="c"><name>_POSIX_SAVED_IDS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_SAVED_IDS</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_SEMAPHORES" definetype="value" lang="c"><name>_POSIX_SEMAPHORES</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_SEMAPHORES</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_SHELL" definetype="value" lang="c"><name>_POSIX_SHELL</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_SHELL</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_SPIN_LOCKS" definetype="value" lang="c"><name>_POSIX_SPIN_LOCKS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_SPIN_LOCKS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_SYNC_IO" definetype="value" lang="c"><name>_POSIX_SYNC_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_SYNC_IO</declaration_preprocessor> <declaration_preprocessor>3</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_THREAD_SAFE_FUNCTIONS" definetype="value" lang="c"><name>_POSIX_THREAD_SAFE_FUNCTIONS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_THREAD_SAFE_FUNCTIONS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_THREADS" definetype="value" lang="c"><name>_POSIX_THREADS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_THREADS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_TIMEOUTS" definetype="value" lang="c"><name>_POSIX_TIMEOUTS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_TIMEOUTS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_TIMERS" definetype="value" lang="c"><name>_POSIX_TIMERS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_TIMERS</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_TIMESTAMP_RESOLUTION" definetype="value" lang="c"><name>_POSIX_TIMESTAMP_RESOLUTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_TIMESTAMP_RESOLUTION</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_V6_ILP32_OFFBIG" definetype="value" lang="c"><name>_POSIX_V6_ILP32_OFFBIG</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_V6_ILP32_OFFBIG</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_V6_LP64_OFF64" definetype="value" lang="c"><name>_POSIX_V6_LP64_OFF64</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_V6_LP64_OFF64</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_V7_ILP32_OFFBIG" definetype="value" lang="c"><name>_POSIX_V7_ILP32_OFFBIG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_V7_ILP32_OFFBIG</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_V7_LP64_OFF64" definetype="value" lang="c"><name>_POSIX_V7_LP64_OFF64</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_V7_LP64_OFF64</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_VDISABLE" definetype="value" lang="c"><name>_POSIX_VDISABLE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_VDISABLE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_POSIX_VERSION" definetype="value" lang="c"><name>_POSIX_VERSION</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_POSIX_VERSION</declaration_preprocessor> <declaration_preprocessor>200809L</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_C_BIND" definetype="value" lang="c"><name>_SC_2_C_BIND</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_C_BIND</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_C_DEV" definetype="value" lang="c"><name>_SC_2_C_DEV</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_C_DEV</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_CHAR_TERM" definetype="value" lang="c"><name>_SC_2_CHAR_TERM</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_CHAR_TERM</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_FORT_DEV" definetype="value" lang="c"><name>_SC_2_FORT_DEV</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_FORT_DEV</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_FORT_RUN" definetype="value" lang="c"><name>_SC_2_FORT_RUN</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_FORT_RUN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_LOCALEDEF" definetype="value" lang="c"><name>_SC_2_LOCALEDEF</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_LOCALEDEF</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS" definetype="value" lang="c"><name>_SC_2_PBS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS_ACCOUNTING" definetype="value" lang="c"><name>_SC_2_PBS_ACCOUNTING</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS_ACCOUNTING</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS_CHECKPOINT" definetype="value" lang="c"><name>_SC_2_PBS_CHECKPOINT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS_CHECKPOINT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS_LOCATE" definetype="value" lang="c"><name>_SC_2_PBS_LOCATE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS_LOCATE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS_MESSAGE" definetype="value" lang="c"><name>_SC_2_PBS_MESSAGE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS_MESSAGE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_PBS_TRACK" definetype="value" lang="c"><name>_SC_2_PBS_TRACK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_PBS_TRACK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_SW_DEV" definetype="value" lang="c"><name>_SC_2_SW_DEV</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_SW_DEV</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_UPE" definetype="value" lang="c"><name>_SC_2_UPE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_UPE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_2_VERSION" definetype="value" lang="c"><name>_SC_2_VERSION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_2_VERSION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_ADVISORY_INFO" definetype="value" lang="c"><name>_SC_ADVISORY_INFO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_ADVISORY_INFO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_AIO_LISTIO_MAX" definetype="value" lang="c"><name>_SC_AIO_LISTIO_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_AIO_LISTIO_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_AIO_MAX" definetype="value" lang="c"><name>_SC_AIO_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_AIO_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_AIO_PRIO_DELTA_MAX" definetype="value" lang="c"><name>_SC_AIO_PRIO_DELTA_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_AIO_PRIO_DELTA_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_ARG_MAX" definetype="value" lang="c"><name>_SC_ARG_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_ARG_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_ASYNCHRONOUS_IO" definetype="value" lang="c"><name>_SC_ASYNCHRONOUS_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_ASYNCHRONOUS_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_ATEXIT_MAX" definetype="value" lang="c"><name>_SC_ATEXIT_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_ATEXIT_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_BARRIERS" definetype="value" lang="c"><name>_SC_BARRIERS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_BARRIERS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_BC_BASE_MAX" definetype="value" lang="c"><name>_SC_BC_BASE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_BC_BASE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_BC_DIM_MAX" definetype="value" lang="c"><name>_SC_BC_DIM_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_BC_DIM_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_BC_SCALE_MAX" definetype="value" lang="c"><name>_SC_BC_SCALE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_BC_SCALE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_BC_STRING_MAX" definetype="value" lang="c"><name>_SC_BC_STRING_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_BC_STRING_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_CHILD_MAX" definetype="value" lang="c"><name>_SC_CHILD_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_CHILD_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_CLK_TCK" definetype="value" lang="c"><name>_SC_CLK_TCK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_CLK_TCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_CLOCK_SELECTION" definetype="value" lang="c"><name>_SC_CLOCK_SELECTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_CLOCK_SELECTION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_COLL_WEIGHTS_MAX" definetype="value" lang="c"><name>_SC_COLL_WEIGHTS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_COLL_WEIGHTS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_CPUTIME" definetype="value" lang="c"><name>_SC_CPUTIME</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_CPUTIME</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_DELAYTIMER_MAX" definetype="value" lang="c"><name>_SC_DELAYTIMER_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_DELAYTIMER_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_EXPR_NEST_MAX" definetype="value" lang="c"><name>_SC_EXPR_NEST_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_EXPR_NEST_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_FSYNC" definetype="value" lang="c"><name>_SC_FSYNC</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_FSYNC</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_GETGR_R_SIZE_MAX" definetype="value" lang="c"><name>_SC_GETGR_R_SIZE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_GETGR_R_SIZE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_GETPW_R_SIZE_MAX" definetype="value" lang="c"><name>_SC_GETPW_R_SIZE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_GETPW_R_SIZE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_HOST_NAME_MAX" definetype="value" lang="c"><name>_SC_HOST_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_HOST_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_IOV_MAX" definetype="value" lang="c"><name>_SC_IOV_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_IOV_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_IPV6" definetype="value" lang="c"><name>_SC_IPV6</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_IPV6</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_JOB_CONTROL" definetype="value" lang="c"><name>_SC_JOB_CONTROL</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_JOB_CONTROL</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_LINE_MAX" definetype="value" lang="c"><name>_SC_LINE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_LINE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_LOGIN_NAME_MAX" definetype="value" lang="c"><name>_SC_LOGIN_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_LOGIN_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MAPPED_FILES" definetype="value" lang="c"><name>_SC_MAPPED_FILES</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MAPPED_FILES</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MEMLOCK" definetype="value" lang="c"><name>_SC_MEMLOCK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MEMLOCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MEMLOCK_RANGE" definetype="value" lang="c"><name>_SC_MEMLOCK_RANGE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MEMLOCK_RANGE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MEMORY_PROTECTION" definetype="value" lang="c"><name>_SC_MEMORY_PROTECTION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MEMORY_PROTECTION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MESSAGE_PASSING" definetype="value" lang="c"><name>_SC_MESSAGE_PASSING</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MESSAGE_PASSING</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MONOTONIC_CLOCK" definetype="value" lang="c"><name>_SC_MONOTONIC_CLOCK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MONOTONIC_CLOCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MQ_OPEN_MAX" definetype="value" lang="c"><name>_SC_MQ_OPEN_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MQ_OPEN_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_MQ_PRIO_MAX" definetype="value" lang="c"><name>_SC_MQ_PRIO_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_MQ_PRIO_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_NGROUPS_MAX" definetype="value" lang="c"><name>_SC_NGROUPS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_NGROUPS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_OPEN_MAX" definetype="value" lang="c"><name>_SC_OPEN_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_OPEN_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_PAGE_SIZE" definetype="value" lang="c"><name>_SC_PAGE_SIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_PAGE_SIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_PAGESIZE" definetype="value" lang="c"><name>_SC_PAGESIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_PAGESIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_PRIORITIZED_IO" definetype="value" lang="c"><name>_SC_PRIORITIZED_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_PRIORITIZED_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_PRIORITY_SCHEDULING" definetype="value" lang="c"><name>_SC_PRIORITY_SCHEDULING</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_PRIORITY_SCHEDULING</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_RAW_SOCKETS" definetype="value" lang="c"><name>_SC_RAW_SOCKETS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_RAW_SOCKETS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_RE_DUP_MAX" definetype="value" lang="c"><name>_SC_RE_DUP_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_RE_DUP_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_READER_WRITER_LOCKS" definetype="value" lang="c"><name>_SC_READER_WRITER_LOCKS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_READER_WRITER_LOCKS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_REALTIME_SIGNALS" definetype="value" lang="c"><name>_SC_REALTIME_SIGNALS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_REALTIME_SIGNALS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_REGEXP" definetype="value" lang="c"><name>_SC_REGEXP</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_REGEXP</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_RTSIG_MAX" definetype="value" lang="c"><name>_SC_RTSIG_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_RTSIG_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SAVED_IDS" definetype="value" lang="c"><name>_SC_SAVED_IDS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SAVED_IDS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SEM_NSEMS_MAX" definetype="value" lang="c"><name>_SC_SEM_NSEMS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SEM_NSEMS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SEM_VALUE_MAX" definetype="value" lang="c"><name>_SC_SEM_VALUE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SEM_VALUE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SEMAPHORES" definetype="value" lang="c"><name>_SC_SEMAPHORES</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SEMAPHORES</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SHARED_MEMORY_OBJECTS" definetype="value" lang="c"><name>_SC_SHARED_MEMORY_OBJECTS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SHARED_MEMORY_OBJECTS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SHELL" definetype="value" lang="c"><name>_SC_SHELL</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SHELL</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SIGQUEUE_MAX" definetype="value" lang="c"><name>_SC_SIGQUEUE_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SIGQUEUE_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SPAWN" definetype="value" lang="c"><name>_SC_SPAWN</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SPAWN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SPIN_LOCKS" definetype="value" lang="c"><name>_SC_SPIN_LOCKS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SPIN_LOCKS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SPORADIC_SERVER" definetype="value" lang="c"><name>_SC_SPORADIC_SERVER</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SPORADIC_SERVER</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SS_REPL_MAX" definetype="value" lang="c"><name>_SC_SS_REPL_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SS_REPL_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_STREAM_MAX" definetype="value" lang="c"><name>_SC_STREAM_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_STREAM_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SYMLOOP_MAX" definetype="value" lang="c"><name>_SC_SYMLOOP_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SYMLOOP_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_SYNCHRONIZED_IO" definetype="value" lang="c"><name>_SC_SYNCHRONIZED_IO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_SYNCHRONIZED_IO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_ATTR_STACKADDR" definetype="value" lang="c"><name>_SC_THREAD_ATTR_STACKADDR</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_ATTR_STACKADDR</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_ATTR_STACKSIZE" definetype="value" lang="c"><name>_SC_THREAD_ATTR_STACKSIZE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_ATTR_STACKSIZE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_CPUTIME" definetype="value" lang="c"><name>_SC_THREAD_CPUTIME</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_CPUTIME</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_DESTRUCTOR_ITERATIONS" definetype="value" lang="c"><name>_SC_THREAD_DESTRUCTOR_ITERATIONS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_DESTRUCTOR_ITERATIONS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_KEYS_MAX" definetype="value" lang="c"><name>_SC_THREAD_KEYS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_KEYS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_PRIO_INHERIT" definetype="value" lang="c"><name>_SC_THREAD_PRIO_INHERIT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_PRIO_INHERIT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_PRIO_PROTECT" definetype="value" lang="c"><name>_SC_THREAD_PRIO_PROTECT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_PRIO_PROTECT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_PRIORITY_SCHEDULING" definetype="value" lang="c"><name>_SC_THREAD_PRIORITY_SCHEDULING</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_PRIORITY_SCHEDULING</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_PROCESS_SHARED" definetype="value" lang="c"><name>_SC_THREAD_PROCESS_SHARED</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_PROCESS_SHARED</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_ROBUST_PRIO_INHERIT" definetype="value" lang="c"><name>_SC_THREAD_ROBUST_PRIO_INHERIT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_ROBUST_PRIO_INHERIT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_ROBUST_PRIO_PROTECT" definetype="value" lang="c"><name>_SC_THREAD_ROBUST_PRIO_PROTECT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_ROBUST_PRIO_PROTECT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_SAFE_FUNCTIONS" definetype="value" lang="c"><name>_SC_THREAD_SAFE_FUNCTIONS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_SAFE_FUNCTIONS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_SPORADIC_SERVER" definetype="value" lang="c"><name>_SC_THREAD_SPORADIC_SERVER</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_SPORADIC_SERVER</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_STACK_MIN" definetype="value" lang="c"><name>_SC_THREAD_STACK_MIN</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_STACK_MIN</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREAD_THREADS_MAX" definetype="value" lang="c"><name>_SC_THREAD_THREADS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREAD_THREADS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_THREADS" definetype="value" lang="c"><name>_SC_THREADS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_THREADS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TIMEOUTS" definetype="value" lang="c"><name>_SC_TIMEOUTS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TIMEOUTS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TIMER_MAX" definetype="value" lang="c"><name>_SC_TIMER_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TIMER_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TIMERS" definetype="value" lang="c"><name>_SC_TIMERS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TIMERS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE" definetype="value" lang="c"><name>_SC_TRACE</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_EVENT_FILTER" definetype="value" lang="c"><name>_SC_TRACE_EVENT_FILTER</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_EVENT_FILTER</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_EVENT_NAME_MAX" definetype="value" lang="c"><name>_SC_TRACE_EVENT_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_EVENT_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_INHERIT" definetype="value" lang="c"><name>_SC_TRACE_INHERIT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_INHERIT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_LOG" definetype="value" lang="c"><name>_SC_TRACE_LOG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_LOG</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_NAME_MAX" definetype="value" lang="c"><name>_SC_TRACE_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_SYS_MAX" definetype="value" lang="c"><name>_SC_TRACE_SYS_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_SYS_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TRACE_USER_EVENT_MAX" definetype="value" lang="c"><name>_SC_TRACE_USER_EVENT_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TRACE_USER_EVENT_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TTY_NAME_MAX" definetype="value" lang="c"><name>_SC_TTY_NAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TTY_NAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TYPED_MEMORY_OBJECTS" definetype="value" lang="c"><name>_SC_TYPED_MEMORY_OBJECTS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TYPED_MEMORY_OBJECTS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_TZNAME_MAX" definetype="value" lang="c"><name>_SC_TZNAME_MAX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_TZNAME_MAX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V6_ILP32_OFF32" definetype="value" lang="c"><name>_SC_V6_ILP32_OFF32</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V6_ILP32_OFF32</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V6_ILP32_OFFBIG" definetype="value" lang="c"><name>_SC_V6_ILP32_OFFBIG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V6_ILP32_OFFBIG</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V6_LP64_OFF64" definetype="value" lang="c"><name>_SC_V6_LP64_OFF64</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V6_LP64_OFF64</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V6_LPBIG_OFFBIG" definetype="value" lang="c"><name>_SC_V6_LPBIG_OFFBIG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V6_LPBIG_OFFBIG</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V7_ILP32_OFF32" definetype="value" lang="c"><name>_SC_V7_ILP32_OFF32</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V7_ILP32_OFF32</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V7_ILP32_OFFBIG" definetype="value" lang="c"><name>_SC_V7_ILP32_OFFBIG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V7_ILP32_OFFBIG</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V7_LP64_OFF64" definetype="value" lang="c"><name>_SC_V7_LP64_OFF64</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V7_LP64_OFF64</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_V7_LPBIG_OFFBIG" definetype="value" lang="c"><name>_SC_V7_LPBIG_OFFBIG</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_V7_LPBIG_OFFBIG</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_VERSION" definetype="value" lang="c"><name>_SC_VERSION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_VERSION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_CRYPT" definetype="value" lang="c"><name>_SC_XOPEN_CRYPT</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_CRYPT</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_ENH_I18N" definetype="value" lang="c"><name>_SC_XOPEN_ENH_I18N</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_ENH_I18N</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_REALTIME" definetype="value" lang="c"><name>_SC_XOPEN_REALTIME</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_REALTIME</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_REALTIME_THREADS" definetype="value" lang="c"><name>_SC_XOPEN_REALTIME_THREADS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_REALTIME_THREADS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_SHM" definetype="value" lang="c"><name>_SC_XOPEN_SHM</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_SHM</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_STREAMS" definetype="value" lang="c"><name>_SC_XOPEN_STREAMS</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_STREAMS</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_UNIX" definetype="value" lang="c"><name>_SC_XOPEN_UNIX</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_UNIX</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_UUCP" definetype="value" lang="c"><name>_SC_XOPEN_UUCP</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_UUCP</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/_SC_XOPEN_VERSION" definetype="value" lang="c"><name>_SC_XOPEN_VERSION</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>_SC_XOPEN_VERSION</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/F_LOCK" definetype="value" lang="c"><name>F_LOCK</name>
<declaration> <declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>F_LOCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/F_OK" definetype="value" lang="c"><name>F_OK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>F_OK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/F_TEST" definetype="value" lang="c"><name>F_TEST</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>F_TEST</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/F_TLOCK" definetype="value" lang="c"><name>F_TLOCK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>F_TLOCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/F_ULOCK" definetype="value" lang="c"><name>F_ULOCK</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>F_ULOCK</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/R_OK" definetype="value" lang="c"><name>R_OK</name>
<attributes><attribute><name>Value</name><value>0x4 (4)</value></attribute>
</attributes>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>R_OK</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>2</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/STDERR_FILENO" definetype="value" lang="c"><name>STDERR_FILENO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>STDERR_FILENO</declaration_preprocessor> <declaration_preprocessor>2</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/STDIN_FILENO" definetype="value" lang="c"><name>STDIN_FILENO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>STDIN_FILENO</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/STDOUT_FILENO" definetype="value" lang="c"><name>STDOUT_FILENO</name>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>STDOUT_FILENO</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/W_OK" definetype="value" lang="c"><name>W_OK</name>
<attributes><attribute><name>Value</name><value>0x2 (2)</value></attribute>
</attributes>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>W_OK</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine><pdefine id="//xsdoc_ref/c/macro/X_OK" definetype="value" lang="c"><name>X_OK</name>
<attributes><attribute><name>Value</name><value>0x1 (1)</value></attribute>
</attributes>
<declaration><declaration_preprocessor>#define</declaration_preprocessor> <declaration_preprocessor>X_OK</declaration_preprocessor> <declaration_preprocessor>(</declaration_preprocessor> <declaration_preprocessor>1</declaration_preprocessor> <declaration_preprocessor>&lt;&lt;</declaration_preprocessor> <declaration_preprocessor>0</declaration_preprocessor> <declaration_preprocessor>)</declaration_preprocessor> </declaration>
</pdefine></defines><timestamp>Wednesday, June 25, 2014</timestamp>
</header>